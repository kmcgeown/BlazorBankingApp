@page "/accountDetails"
@using Application.Customer.Commands.CreateCustomerLoanRequest
@using Application.Customer.Queries.GetCustomerAccountDetails
@using Application.Enums
@using Application.Models
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using Web.Services
@using System.Linq
@inject AuthStateService AuthService
@using MediatR
@using Radzen
@inject IMediator Mediator
@inject NotificationService NotificationService

@if (AuthService.IsLoggedIn)
{
    @if (customer != null)
    {
        <h3>Account Balances for @customer.Name</h3>

        @if (customer.Accounts != null && customer.Accounts.Any())
        {
            <table class="table table-striped table-sm">
                <thead>
                    <tr>
                        <th>Account Type</th>
                        <th style="text-align: right;">Balance</th>
                        <th style="text-align: right;">Outstanding Loan</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var account in customer.Accounts.OrderBy(a => a.Type.ToString())) 
                    {
                        <tr>
                            <td>@GetEnumDisplayName(account.Type)</td>
                            <td style="text-align: right;">@account.Balance.ToString("C2")</td>
                            <td style="text-align: right;">@account.OutstandingBalance.ToString("C2")</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="2"><strong>Total Balance</strong></td> @* Adjusted colspan *@
                        <td style="text-align: right;"><strong>@CalculateTotalBalance(customer.Accounts).ToString("C2")</strong></td>
                    </tr>
                    <tr>
                        <td colspan="2"><strong>Total Outstanding</strong></td> @* Adjusted colspan *@
                        <td style="text-align: right;"><strong>@CalculateTotalOutstanding(customer.Accounts).ToString("C2")</strong></td>
                    </tr>
                </tfoot>
            </table>
            <hr />
            @if (showLoanDialog)
            {
                <div class="loan-modal-overlay" @onclick="CloseLoanDialog">
                    <div class="loan-modal-content" @onclick:stopPropagation="true">
                        <button type="button" class="loan-modal-close-btn" aria-label="Close" @onclick="CloseLoanDialog">&times;</button>
                        <h5>Loan Request</h5>
                        <hr />

                        <EditForm Model="loanRequest" OnValidSubmit="HandleLoanRequest">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label for="loanAmount" class="form-label">Loan Amount (Max: 10,000):</label>
                                <InputNumber id="loanAmount" class="form-control" @bind-Value="loanRequest.Amount" />
                                <ValidationMessage For="@(() => loanRequest.Amount)" />
                            </div>

                            <div class="mb-3">
                                <label for="loanDuration" class="form-label">Loan Duration (Years):</label>
                                <InputNumber id="loanDuration" class="form-control" @bind-Value="loanRequest.DurationYears" />
                                <ValidationMessage For="@(() => loanRequest.DurationYears)" />
                            </div>


                            @if (!string.IsNullOrEmpty(loanRequestMessage))
                            {
                                <div class="mt-3 alert @(loanRequestSuccess ? "alert-success" : "alert-danger")">
                                    @loanRequestMessage
                                </div>
                            }

                            <hr />
                            <div class="d-flex justify-content-end">
                                <button type="button" class="btn btn-secondary me-2" @onclick="CloseLoanDialog">Cancel</button>
                                <button type="submit" class="btn btn-primary" @onclick="RequestLoan">Submit Request</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }


            @* disabled="@IsCreditTooLow" *@
            <span title="@GetTooltip()">
                <button class="btn btn-primary"
                @onclick="ApplyForCredit"         
                >
                    Apply For Loan
                </button>
            </span>

            <hr />
            <h4>Transfer Funds</h4>
            @if (customer.Accounts.Count >= 2) 
            {
                <EditForm Model="transferModel" OnValidSubmit="HandleTransfer">
                    <DataAnnotationsValidator /> 

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="fromAccount" class="form-label">From Account:</label>
                            <InputSelect id="fromAccount" class="form-select" @bind-Value="transferModel.FromAccountId">
                                <option value="0">-- Select Account --</option> 
                                @foreach (var account in customer.Accounts)
                                {
                                    <option value="@account.AccountId">@GetEnumDisplayName(account.Type) (@account.AccountId) - @account.Balance.ToString("C2")</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => transferModel.FromAccountId)" />
                        </div>

                        <div class="col-md-4">
                            <label for="toAccount" class="form-label">To Account:</label>
                            <InputSelect id="toAccount" class="form-select" @bind-Value="transferModel.ToAccountId">
                                <option value="0">-- Select Account --</option> 
                                @foreach (var account in customer.Accounts)
                                {
                                    <option value="@account.AccountId">@GetEnumDisplayName(account.Type) (@account.AccountId) - @account.Balance.ToString("C2")</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => transferModel.ToAccountId)" />
                        </div>

                        <div class="col-md-3">
                            <label for="amount" class="form-label">Amount:</label>
                            <InputNumber id="amount" class="form-control" @bind-Value="transferModel.Amount" step="0.01" />
                            <ValidationMessage For="@(() => transferModel.Amount)" />
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary" disabled="@(!IsTransferPossible())">Transfer</button>

                    @if (!string.IsNullOrEmpty(transferMessage))
                    {
                        <div class="mt-3 alert @(transferSuccess ? "alert-success" : "alert-danger")">
                            @transferMessage
                        </div>
                    }
                </EditForm>


            }
            else
            {
                <p>This customer has no accounts.</p>
            }

        }
        else
        {
            <p><em>No customer details provided.</em></p>
        }
    }
}

else
{
    <p>Please log in to see your account details.</p>
}
@code 
{
    public CustomerDetails? customer;

    private Transfer transferModel = new Transfer();
    private string? transferMessage;
    private bool transferSuccess = false;
    private bool IsCreditTooLow;
    private bool showLoanDialog = false;
    private LoanRequest loanRequest = new LoanRequest();
    // private decimal calculatedInterestRate = 0.0m;
    private string? loanRequestMessage;
    private bool loanRequestSuccess = false;


    private void HandleLoanRequest()
    {

    }

    private void OpenLoanDialog()
    {
        loanRequest = new LoanRequest(); 
        loanRequestMessage = null; 
        loanRequestSuccess = false;
        showLoanDialog = true;
        StateHasChanged(); 
    }

    private void CloseLoanDialog()
    {
        showLoanDialog = false;
        StateHasChanged(); 
    }

    protected override void OnInitialized()
    {
        if (!AuthService.IsLoggedIn)
        {

        }
        else
        {
            GetCustomerDetails();
        }
    }
    async void GetCustomerDetails()
    {
        customer = await Mediator.Send(new GetCustomerAccountDetailsQuery(AuthService.CurrentUsername));
        IsCreditTooLow = customer?.CreditRating < 20;
    }

    async void RequestLoan()
    {
        loanRequest.CreditRating = customer!.CreditRating;
        loanRequest.Name = customer.Name;
        loanRequest.CustomerId = customer.CustomerId;
        var account = await Mediator.Send(new CreateCustomerLoanRequestCommand(loanRequest));
        if (account.Status == AccountStatus.Rejected)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Style = "position: absolute; inset-inline-start: -1000px;",
                    Severity = NotificationSeverity.Error,
                    Summary = "Loan Rejected",
                    Detail = "We value your business but your application was rejected.",
                    Duration = 4000
                });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Style = "position: absolute; inset-inline-start: -1000px;",
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Your loan has been approved.",
                    Duration = 4000
                });
            customer.Accounts.Add(account);
        }
        showLoanDialog = false;
        StateHasChanged(); 
    }

     

    private string GetTooltip() =>
        IsCreditTooLow ? "Apologies your credit limit is too low to apply" : string.Empty;

    private void ApplyForCredit()
    {
        showLoanDialog = true;
    }
    public static string GetEnumDisplayName(Enum enumValue)
    {
        if (enumValue == null)
            return string.Empty;

        try
        {
            return enumValue.GetType()
                            .GetMember(enumValue.ToString())
                            .First() // Get the MemberInfo
                            .GetCustomAttribute<DisplayAttribute>()? 
                            .GetName() ?? enumValue.ToString(); 
        }
        catch 
        {
            return enumValue.ToString(); 
        }
    }

    private void HandleTransfer()
    {
        transferMessage = null; 
        transferSuccess = false;

        if (customer?.Accounts == null)
        {
            transferMessage = "Error: Customer or accounts not found.";
            return;
        }

        
        if (transferModel.FromAccountId == 0 || transferModel.ToAccountId == 0)
        {
            transferMessage = "Please select both 'From' and 'To' accounts.";
            return;
        }

        if (transferModel.FromAccountId == transferModel.ToAccountId)
        {
            transferMessage = "Cannot transfer funds to the same account.";
            return;
        }

        if (transferModel.Amount <= 0)
        {
            transferMessage = "Transfer amount must be positive.";
            return;
        }

        var fromAccount = customer.Accounts.FirstOrDefault(a => a.AccountId == transferModel.FromAccountId);
        var toAccount = customer.Accounts.FirstOrDefault(a => a.AccountId == transferModel.ToAccountId);

        if (fromAccount == null || toAccount == null)
        {
            transferMessage = "Error: One or both selected accounts could not be found.";
            return;
        }

        if (fromAccount.Balance < transferModel.Amount)
        {
            transferMessage = $"Insufficient funds in account {fromAccount.AccountId}. Available: {fromAccount.Balance:C2}";
            return;
        }

        try
        {
            fromAccount.Balance -= transferModel.Amount;
            toAccount.Balance += transferModel.Amount;

            transferSuccess = true;
            transferMessage = $"Successfully transferred {transferModel.Amount:C2} from account {fromAccount.AccountId} to account {toAccount.AccountId}.";

            //TODO: Update CustomerDetails with fromAccount and toAccount and persist to DB

            transferModel = new Transfer();

        }
        catch (Exception ex) 
        {
            transferMessage = $"An unexpected error occurred during transfer: {ex.Message}";
        }

    }

    private bool IsTransferPossible()
    {
        return transferModel.FromAccountId != 0 && transferModel.ToAccountId != 0;
    }

    private decimal CalculateTotalBalance(List<Account> accounts)
    {
        return accounts?.Sum(a => a.Balance) ?? 0m;
    }

    private decimal CalculateTotalOutstanding(List<Account> accounts)
    {
         return accounts?.Where(a => a.Type == AccountType.Loan).Sum(a => a.OutstandingBalance) ?? 0m;
    }
 

}